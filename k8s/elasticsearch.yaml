apiVersion: v1
kind: Secret
metadata:
  name: s3-data-keys
  namespace: ${KUBE_NAMESPACE}
type: Opaque
data:
  AWS_ACCESS_KEY_ID: ${SCW_DATA_ACCESS_KEY_B64}
  AWS_SECRET_ACCESS_KEY: ${SCW_DATA_SECRET_KEY_B64}
---
apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  name: ${APP_GROUP}
  namespace: ${KUBE_NAMESPACE}
spec:
  version: ${ELASTIC_VERSION}
  volumeClaimDeletePolicy: ${ELASTIC_STORAGE_POLICY}
  auth:
    fileRealm:
    - secretName: ${APP_GROUP}-es-users
    roles:
    - secretName: ${APP_GROUP}-es-roles
  nodeSets:
  - name: default
    count: ${ELASTIC_NODES}
    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: ${ELASTIC_STORAGE_SIZE}
    podTemplate:
      spec:
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
        - name: install-plugins
          command:
          - sh
          - -c
          - |
            bin/elasticsearch-plugin install --batch repository-s3
        - name: add-aws-keys
          env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: s3-data-keys
                key: AWS_ACCESS_KEY_ID
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: s3-data-keys
                key: AWS_SECRET_ACCESS_KEY
          command:
          - sh
          - -c
          - |
            echo $AWS_ACCESS_KEY_ID | bin/elasticsearch-keystore add --stdin --force s3.client.default.access_key
            echo $AWS_SECRET_ACCESS_KEY | bin/elasticsearch-keystore add --stdin --force s3.client.default.secret_key
        containers:
        - name: elasticsearch
          env:
          - name: ES_JAVA_OPTS
            value: -Xms${ELASTIC_MEM_JVM} -Xmx${ELASTIC_MEM_JVM}
          resources:
            requests:
              memory: ${ELASTIC_MEM}
          volumeMounts:
          - name: stopwords
            mountPath: /usr/share/elasticsearch/config/analysis/
        volumes:
        - name: stopwords
          configMap:
            name: ${APP_GROUP}-stopwords
---
# daily snaphots
apiVersion: batch/v1
kind: CronJob
metadata:
  name: elasticsearch-snapshotter
  namespace: ${KUBE_NAMESPACE}
spec:
  schedule: "@daily"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: snapshotter
            image: curlimages/curl:latest
            volumeMounts:
              - name: es-basic-auth
                mountPath: /tmp/es-basic-auth
                readOnly: true
            command:
            - /bin/sh
            args:
            - -c
            - 'curl -s -i -k -XPUT "https://elastic:$(cat /tmp/es-basic-auth/elastic)@${APP_GROUP}-es-http:9200/_snapshot/${SCW_KUBE_PROJECT_NAME}-${SCW_ZONE}-${KUBE_NAMESPACE}/%3Csnapshot-%7Bnow%2Fm%7D%3E" | tee /dev/stderr | grep "200 OK"'
          restartPolicy: Never
          activeDeadlineSeconds: 30
          volumes:
          - name: es-basic-auth
            secret:
              secretName: ${APP_GROUP}-es-elastic-user